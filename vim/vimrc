" symlink ~/.vimrc to the path of this file

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } " Fuzzy file searching
Plug 'junegunn/fzf.vim' " Grepping
Plug 'scrooloose/nerdtree' " Filetree explorer
Plug 'tpope/vim-fugitive' " Git blame
Plug 'tpope/vim-surround' " Easy quotes/parenthesizing
Plug 'tpope/vim-repeat' " Allows . to repeat other custom commands
Plug 'tomtom/tcomment_vim' " Comment toggling
Plug 'AndrewRadev/splitjoin.vim' " Quick toggling of single- and multi- line blocks
Plug 'ycm-core/YouCompleteMe' " Autocomplete
" Plug 'lifepillar/vim-mucomplete'
Plug 'dense-analysis/ale' " Async Lint Engine
Plug 'vim-scripts/matchit.zip' " Extends matchit for a variety of langs (% to find corresponding do/end)
Plug 'sheerun/vim-polyglot' " language highlighting
Plug 'prettier/vim-prettier', { 'do': 'yarn install' } " js formatter
Plug 'slashmili/alchemist.vim' " elixir magic
Plug 'nathanaelkane/vim-indent-guides'

call plug#end()
" ============================================================================
syntax on
set number                          " Show line numbers
set nowrap                          " Do not wrap lines
set noswapfile                      " Disable creation of *.swp files
set tabstop=2                       " Two-space tabs
set shiftwidth=2                    " Number of spaces to use in each autoindent step
set softtabstop=2                   " Number of spaces to skip or insert when <BS>ing or <Tab>ing
set smarttab                        " Use shiftwidth and softtabstop to insert or delete (on <BS>) blanks
set expandtab                       " Spaces instead of tabs for better cross-editor compatibility
set cindent                         " Recommended seting for automatic C-style indentation
set autoindent                      " Keep the indent when creating a new line
set smartindent
set smarttab                        " Use shiftwidth and softtabstop to insert or delete (on <BS>) blanks
set incsearch                       " Find the next match as we type the search
set hlsearch                        " Highlight searches by default
set ignorecase                      " Ignore case when searching...
set smartcase                       " ...unless we type a capital
set guifont=Menlo\ Regular:h16
set wildmenu                        " Make tab completion act more like bash
set wildmode=longest,list,full      " Tab complete to longest common string, like bash
set completeopt+=longest            " Tab complete type to search
set switchbuf=useopen               " Don't re-open already opened buffers
set noeb vb t_vb=.                  " Disable audio + visual bells for errors
set autoread                        " When files change in-memory, autoread them without the UI prompt

" Undo
set undodir=$HOME/.vim-config/undodir
set undofile
set undolevels=10000
set undoreload=10000

" Use system clipboard
set clipboard+=unnamed                     " Set system clipboard
set mouse=a

" lifepillar/vim-mucomplete settings
" set completeopt+=menuone
" set completeopt+=noselect
" set shortmess+=c   " Shut off completion messages
" set belloff+=ctrlg " If Vim beeps during completion
" let g:mucomplete#enable_auto_at_startup = 1

colorscheme jellybeans

autocmd BufNewFile,BufRead {Gemfile,Rakefile,Capfile,*.rake,config.ru,*.god} set ft=ruby
autocmd BufNewFile,BufRead *.ts,*.tsx setlocal filetype=typescript

" Remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" when typing 'pry' in a ruby file, automatically switches to full require
au BufReadPost,BufNewFile *.rb iabbrev pry require 'pry'; binding.pry

" vim-prettier - formats on save
let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync

" run mix format on save
autocmd BufWritePost *.exs,*.ex silent :!mix format %
" ============================================================================
let mapleader=","

" Window navigation can be done with just Ctrl+direction(h,j,k,l)
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-l> <C-w>l
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-j> <C-w>j

" `vv` for vertical split, `ss` for horizontal split
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

" Fuzzy file search via <Leader>t; search in buffers via <Leader>b
nnoremap <silent> <Leader>t :FZF<cr>
nnoremap <silent> <Leader>b :Buffers<cr>

" <Leader>ws removes trailing whitespace
nnoremap <silent> <Leader>ws :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" overwrite built-in `s` command for `sj` and `sk`
" `sj` to toggle single-line block -> multi-line block, `sk` to toggle multi-line -> single line
nnoremap s <Nop>
nmap sj :SplitjoinSplit<cr>
nmap sk :SplitjoinJoin<cr>

" Term search via <Leader>gg
map <silent> <Leader>gg :Ag<cr>

" Shift+k to grep for the word under the cursor
nnoremap <silent> K :Ag <C-R><C-W><CR>

" Leader+k to search/highlight the word under the cursor, within the current file
nnoremap <silent> <Leader>k *

" clear highlighting via //
map <silent> // :nohlsearch<CR>

" Leader jm|jc|jv to fuzzy file search within models, controllers, or views
map <Leader>jm :FZF app/models<CR>
map <Leader>jc :FZF app/controllers<CR>
map <Leader>jv :FZF app/views<CR>

" Leader+ff to fuzzy file search the word under the cursor ("find-file")
nnoremap <Leader>ff :FzfTagsCurrWord<CR>
command! FzfTagsCurrWord call s:FzfTagsCurrWord()
function! s:FzfTagsCurrWord()
  call fzf#vim#tags(expand('<cword>'))
endfunction

" copy current filename (cf: fullpath, cr: relative path, cn: filename) into system clipboard
nnoremap <silent> <Leader>cf :let @* = expand("%:~")<CR>
nnoremap <silent> <Leader>cr :let @* = expand("%")<CR>
nnoremap <silent> <Leader>cn :let @* = expand("%:t")<CR>

" Use numbers to pick the tab you want (like iTerm)
map <silent> <D-1> :tabn 1<cr>
map <silent> <D-2> :tabn 2<cr>
map <silent> <D-3> :tabn 3<cr>
map <silent> <D-4> :tabn 4<cr>
map <silent> <D-5> :tabn 5<cr>
map <silent> <D-6> :tabn 6<cr>
map <silent> <D-7> :tabn 7<cr>
map <silent> <D-8> :tabn 8<cr>
map <silent> <D-9> :tabn 9<cr>

command! Q :q
command! W :w
command! WA :wa
command! Wa :wa
command! QA :qa
command! Qa :qa
" ============================================================================
" Make nerdtree look nice
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30

" Disable the scrollbars (NERDTree)
set guioptions-=r
set guioptions-=L

" Disable the macvim toolbar
set guioptions-=T

nnoremap <silent> <Leader>r :NERDTreeRefresh<cr>

" Opens NERDTree, expose current file with Ctrl + \ (backslash)
" calls NERDTreeFind if
"   + NERDTree is active,
"   + current window contains a modifiable file
"   + we're not in vimdiff

function! OpenNerdTree()
  if &modifiable && strlen(expand('%')) > 0 && !&diff
    NERDTreeFind
  else
    NERDTreeToggle
  endif
endfunction
nnoremap <silent> <C-\> :call OpenNerdTree()<CR>
" ============================================================================
" Find the related spec for any file you open.
function! s:RelatedSpec()
  let l:fullpath = expand("%:p")
  let l:filepath = expand("%:h")
  let l:fname = expand("%:t")
  let l:filepath_without_app = substitute(l:filepath, "app/", "", "")

  " Possible names for the spec/test for the file we're looking at
  let l:test_names = [substitute(l:fname, ".rb$", "_spec.rb", ""), substitute(l:fname, ".rb$", "_test.rb", "")]

  " Possible paths
  let l:test_paths = ["spec", "fast_spec", "test"]

  for test_name in l:test_names
    for path in l:test_paths
      let l:spec_path = path . "/" . l:filepath_without_app . "/" . test_name
      let l:full_spec_path = substitute(l:fullpath, l:filepath . "/" . l:fname, l:spec_path, "")
      if filereadable(l:spec_path)
        return l:full_spec_path
      end
    endfor
  endfor
endfunction

" Find the file being tested when looking at a spec
function! s:FileRelatedToSpec()
  let l:fullpath = expand("%:p")
  let l:filepath = expand("%:h")
  let l:fname = expand("%:t")

  let l:related_file = substitute(l:filepath, "fast_spec/", "", "")
  let l:related_file = substitute(l:related_file, "spec/", "", "")

  let l:related_file_name = substitute(l:fname, "_spec.rb$", ".rb", "")

  return substitute(l:fullpath, l:filepath . "/" . l:fname, "app/" . l:related_file . "/" . l:related_file_name, "")
endfunction

" If looking at a regular file, find the related spec
" If looking at a spec, find the related file
function! s:RelatedSpecOrFile()
  let l:fname = expand("%:t")
  if match(l:fname, "_spec") != -1
    let l:result = s:FileRelatedToSpec()
  else
    let l:result = s:RelatedSpec()
  endif

  return l:result
endfunction

function! s:RelatedSpecOpen()
  let l:spec_path = s:RelatedSpecOrFile()
  if filereadable(l:spec_path)
    execute ":e " . l:spec_path
  endif
endfunction

function! s:RelatedSpecVOpen()
  let l:spec_path = s:RelatedSpecOrFile()
  if filereadable(l:spec_path)
    execute ":botright vsp " . l:spec_path
  endif
endfunction

command! RelatedSpecVOpen call s:RelatedSpecVOpen()
command! RelatedSpecOpen call s:RelatedSpecOpen()

nnoremap <silent> <C-s> :RelatedSpecVOpen<CR>
nnoremap <silent> ,<C-s> :RelatedSpecOpen<CR>

" ============================================================================
